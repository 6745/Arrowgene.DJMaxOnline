using Arrowgene.Buffers;

namespace Arrowgene.DJMaxOnline.Server.Handler;

public class AuthenticateInSndAccReqHandler : IPacketHandler
{
    public void Handle(Client client, Packet packet)
    {
        // OnAuthenticateInAck: [Id:OnAuthenticateInAck(0x10)] [Size:92] [Source:Server]
        // Header:    1C F9 05 00 00
        // 00000000   00 00 00 00 07 00 00 00  16 00 00 00 00 00 42 45   ··············BE
        // 00000010   4C 4C 45 43 4E 00 00 00  00 00 00 00 00 00 00 00   LLECN···········
        // 00000020   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ················
        // 00000030   00 00 00 00 00 00 00 00  00 00 00 00 42 45 4C 4C   ············BELL
        // 00000040   45 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   E···············
        // 00000050   00 00 00 00 00                                     ·····           

        IBuffer buf = new StreamBuffer();
        buf.WriteBytes(Convert.FromHexString(
            "00000000070000001600000000004245" +
            "4C4C45434E0000000000000000000000" +
            "00000000000000000000000000000000" +
            "00000000000000000000000042454C4C" +
            "45000000000000000000000000000000" +
            "0000000000"
        ));

        Packet rsp = new Packet(PacketMeta.OnAuthenticateInAck, buf.GetAllBytes());
        rsp.Header = new byte[] { 0x1C, 0xF9, 0x05, 0x00, 0x00 };
        client.Send(rsp);  //10

        // 0b
        Packet rsp1 = new Packet(PacketMeta.OnChannelInfoInf,
            new byte[]
            {
                 0x01, 0x00, 0xD1, 0x5B, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x62, 0x00, 0x4C, 0x49, 0x47, 0x48, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x2E, 0x5B, 0x35, 0x4B, 0x45, 0x59, 0x5D, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x69, 0x63, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x2C, 0x01, 0x65, 0x20, 0x1A, 0x98, 0xD1, 0x5B, 0x00, 0x00, 0x01, 0x00, 0x99, 0x5C, 0x01,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x00, 0x4D, 0x41, 0x4E, 0x49, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x5B, 0x37, 0x4B, 0x45, 0x59, 0x5D, 0x20, 0x43, 0x6C, 0x61,
                0x73, 0x73, 0x69, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2C, 0x01, 0x65, 0x20, 0x1A, 0x98, 0x99, 0x5C, 0x00, 0x00
            }
        );
        rsp1.Header = new byte[] { 0x48, 0xBB, 0x00, 0x00, 0x00, };
        client.Send(rsp1);
        
        
        //2f
        Packet rsp2 = new Packet(PacketMeta.OnUpdateUserAccountClassInf,
            new byte[] { 0x00, 0x00, 0x04, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC }

        );
        rsp2.Header = new byte[] {  0x61, 0xF9, 0x05, 0x00, 0x00,  };
        client.Send(rsp2);
        
    }

    public PacketId Id => PacketId.AuthenticateInSndAccReq;
}